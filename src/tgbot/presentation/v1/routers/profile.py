from aiogram import Router, Bot, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from dishka.integrations.aiogram import FromDishka, inject

from tgbot.application import UserGateway, Promocode, User
from tgbot.presentation.v1.shit import check_with_answer
from tgbot.presentation.v1.keyboards import (
    get_profile_keyboard,
    get_main_keyboard,
    get_back_keyboard,
)

profile_router = Router()


@profile_router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å üë§")
@inject
async def profile(
    message: Message, session: FromDishka[AsyncSession], bot: Bot
):
    if not await check_with_answer(bot=bot, message=message, session=session):
        return

    gateway = UserGateway(session=session)

    user = await gateway.by_tg_id(message.from_user.id)

    if not user:
        raise Exception()  # TODO –∫–∏–¥–∞–µ—Ç —Å—é–¥–∞ –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞ –∏ –∫–ª–∏–∫–Ω—É—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞ –∫–ª–∞–≤—É

    await message.answer(
        f"–Ω–∏–∫: @{message.from_user.username}\n"
        f"–¥—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.amount_of_referrals}\n"
        f"–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤–µ–∑–¥: {user.earned}\n"
        f"–±–∞–ª–∞–Ω—Å: {user.balance}",
        reply_markup=get_profile_keyboard(),
    )


class PromoCodeState(StatesGroup):
    waiting_for_promo = State()


@profile_router.message(F.text == "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
@inject
async def enter_promo_code(
    message: Message,
    session: FromDishka[AsyncSession],
    bot: Bot,
    state: FSMContext,
):
    if not await check_with_answer(bot=bot, message=message, session=session):
        return

    user_gateway = UserGateway(session=session)
    user = await user_gateway.by_tg_id(message.from_user.id)

    if user.promo:
        await message.answer(
            "–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥", reply_markup=get_main_keyboard()
        )

    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥", reply_markup=get_back_keyboard()
        )
        await state.set_state(PromoCodeState.waiting_for_promo)


@profile_router.message(PromoCodeState.waiting_for_promo)
@inject
async def process_promo_code(
    message: Message,
    state: FSMContext,
    session: FromDishka[AsyncSession],
    bot: Bot,
):
    if not await check_with_answer(bot=bot, message=message, session=session):
        return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    if not message.text:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥"
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer(
            "üîù –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", reply_markup=get_main_keyboard()
        )
        await state.clear()
        return

    # –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    promo = await session.scalar(
        select(Promocode).where(Promocode.name == message.text)
    )
    if not promo:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if promo.remaining_usages <= 0:
        await message.answer("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo.remaining_usages -= 1

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID
    user = await session.scalar(
        select(User).where(User.tg_id == str(message.from_user.id))
    )
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user.balance += promo.reward
    user.earned += promo.reward
    user.promo = True

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
    await session.commit()
    await state.clear()

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await message.answer(
        f"–í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: {message.text}\n–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ - {promo.reward} –∑–≤–µ–¥",
        reply_markup=get_main_keyboard(),
    )
